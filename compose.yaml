services:
  frontend:
    image: ft_transcendence/frontend
    container_name: ft_transcendence_frontend
    build:
      context: frontend/
      dockerfile: Dockerfile
    expose:
      - 80
    networks:
      - ft_transcendence_network
    depends_on:
      - backend
  
  backend:
    image: ft_transcendence/backend
    container_name: ft_transcendence_backend
    build:
      context: backend/
      dockerfile: Dockerfile
      args:
        - DEV=true
    expose:
      - 8000
    networks:
      - ft_transcendence_network
    volumes:
      - ./backend/app:/app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    environment:
      - DB_HOST=ft_transcendence_database
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASSWORD}
    depends_on:
      database:
        condition: service_healthy
  
  backend_redis:
    image: redis
    container_name: ft_transcendence_backend_redis
    expose:
      - 6379
    networks:
      - ft_transcendence_network
    
  nginx:
    image: ft_transcendence/reverse_proxy
    container_name: ft_transcendence_reverse_proxy
    build:
      context: reverse_proxy
      dockerfile: Dockerfile
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    networks:
      - ft_transcendence_network
    depends_on:
      - backend

  database:
    image: postgres:alpine
    container_name: ft_transcendence_database
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    expose:
      - 5432
    networks:
      - ft_transcendence_network
    volumes:
      - database-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

networks:
  ft_transcendence_network:

volumes:
  database-data: