services:
  frontend:
    image: tr/frontend
    container_name: tr_frontend
    build:
      context: frontend/
      dockerfile: Dockerfile
    expose:
      - 80
    networks:
      - tr_network
    depends_on:
      - backend

  backend:
    image: tr/backend
    container_name: tr_backend
    build:
      context: backend/
      dockerfile: Dockerfile
    expose:
      - 8000
    ports:
      - 8000:8000
    networks:
      - tr_network
    env_file:
      - ./.env
    environment:
      - DB_HOST=tr_database
    depends_on:
      database:
        condition: service_healthy

  backend_redis:
    image: redis
    container_name: tr_backend_redis
    expose:
      - 6379
    networks:
      - tr_network
    volumes:
      - redis-data:/data

  nginx:
    image: tr/reverse_proxy
    container_name: tr_reverse_proxy
    build:
      context: reverse_proxy
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    networks:
      - tr_network
    depends_on:
      - backend

  database:
    image: postgres:alpine
    container_name: tr_database
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    expose:
      - 5432
    networks:
      - tr_network
    volumes:
      - database-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

networks:
  tr_network:

volumes:
  database-data:
  redis-data:
